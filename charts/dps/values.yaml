replicaCount: 1
image:
  repository: dimozone/dps
  pullPolicy: IfNotPresent
  tag: 6edf70a
  command:
    - /dps
  args:
    - '-w'
    - '-r'
    - /resources/resources.yaml
    - '-c'
    - /config/
    - streams
    - /streams/
imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''
serviceAccount:
  create: true
  annotations: {}
  name: ''
podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - all
env:
  KAFKA_BOOTSTRAP_SERVERS: kafka-dev-dimo-kafka-kafka-brokers
  DEVICE_SIGNALS_TOPIC: topic.device.signals
  DEVICE_VALID_CE_TOPIC: topic.device.validcloudevents
  DEVICE_PARTIAL_CE_TOPIC: topic.device.partialcloudevents
  ELASTIC_MULTIPLE_NODE: false
  ENVIRONMENT: dev
  CLICKHOUSE_PORT: 9440
  CLICKHOUSE_SIGNAL_DATABASE: dimo
  CLICKHOUSE_INDEX_DATABASE: file_index
  S3_CLOUDEVENT_BUCKET: dimo-ingest-cloudevent-dev
  S3_EPHEMERAL_BUCKET: dimo-ingest-ephemeral-dev
  LOG_LEVEL: DEBUG
service:
  type: ClusterIP
  ports:
    mon-http:
      port: 8888
      targetPort: mon-http
      protocol: TCP
    http:
      port: 8080
      targetPort: http
      protocol: TCP
ports:
  - name: mon-http
    containerPort: 8888
    protocol: TCP
  - name: http
    containerPort: 8080
    protocol: TCP
livenessProbe:
  httpGet:
    path: /ping
    port: mon-http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  httpGet:
    path: /ready
    port: mon-http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
ingress:
  enabled: false
resources:
  limits:
    cpu: 250m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 128Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
podDisruptionBudget:
  maxUnavailable: 1
serviceMonitor:
  enabled: true
  path: /metrics
  port: mon-http
  interval: 30s
kafka:
  clusterName: kafka-dev-dimo-kafka
  topics:
    - name: topic.device.signals
      config:
        segment.ms: '3600000'
        compression.type: producer
        cleanup.policy: delete
        retention.ms: '7200000'
    - name: topic.device.validcloudevents
      config:
        segment.ms: '3600000'
        compression.type: producer
        cleanup.policy: delete
        retention.ms: '7200000'
    - name: topic.device.partialcloudevents
      config:
        segment.ms: '3600000'
        compression.type: producer
        cleanup.policy: delete
        retention.ms: '7200000'
